{"version":3,"sources":["webpack:///./src/mixins/moduleMixin.js"],"names":["actionSuccessAfter","this","$message","message","$t","type","duration","showClose","onClose","getListData","moduleMixin","data","mixinConfig","activatedAutoRequest","getListDataURL","getListDataIsPage","deleteURL","isBatchDelete","batchDeleteKey","getDetailsURL","updateStatusURL","updateSortURL","exportURL","listData","queryParams","page","pageSize","total","order","orderField","getDataLoading","isRenderDialog","listSelections","created","methods","url","params","key","$http","get","then","ok","msg","rows","getListDataAfter","error","Promise","reject","catch","selectionChangeHandle","handlePageSizeChange","handleCurrentPageChange","addOrUpdateHandle","id","$nextTick","$refs","addOrUpdate","visible","formData","deleteHandle","title","info","handle","confirmConfig","confirmButtonText","cancelButtonText","length","map","item","$confirm","delete","call","updateStatus","idKey","idVal","statusKey","statusVal","method","updateSort","sortKey","sortVal","sortChangeHandle"],"mappings":"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","file":"js/chunk-2d22a183.ab64b7a9.js","sourcesContent":["// import qs from 'qs'\n\n// 操作成功后刷新列表数据\nfunction actionSuccessAfter () {\n  this.$message({\n    message: this.$t('prompt.success'),\n    type: 'success',\n    duration: 1000,\n    showClose: true,\n    onClose: () => {\n      this.getListData()\n    }\n  })\n}\n\nconst moduleMixin = {\n  data () {\n    return {\n      // 配置属性\n      mixinConfig: {\n        activatedAutoRequest: true, // 此页面是否在激活（进入）时，调用查询数据列表接口？\n        getListDataURL: null, // 数据列表接口，API地址\n        getListDataIsPage: false, // 数据列表接口，是否需要分页？\n        deleteURL: null, // 删除接口，API地址\n        isBatchDelete: false, // 删除接口，是否需要批量？\n        batchDeleteKey: 'id', // 删除接口，批量状态下由那个key进行标记操作？比如：pid，uid...\n        getDetailsURL: null, // 数据单个详情接口，API地址\n        updateStatusURL: null, // 改变状态， API地址\n        updateSortURL: null, // 改变排序， API地址\n        exportURL: null // 导出接口，API地址\n      },\n      // 默认属性\n      listData: [], // 列表数据\n      queryParams: {}, // 查询条件\n      page: 1, // 当前页码\n      pageSize: 10, // 每页数\n      total: 0, // 总条数\n      order: null, // 排序顺序，asc | desc\n      orderField: null, // 排序字段\n      getDataLoading: false, // 获取数据，loading状态\n      isRenderDialog: false, // 新增|更新，弹窗是否渲染\n      listSelections: [] // 列表数据，多选项\n    }\n  },\n  created () {\n    if (this.mixinConfig.activatedAutoRequest) {\n      this.getListData()\n    }\n  },\n  methods: {\n    // 获取数据列表\n    getListData () {\n      const url = this.mixinConfig.getListDataURL\n      const params = {\n        order: this.order,\n        orderField: this.orderField,\n        page: this.mixinConfig.getListDataIsPage ? this.page : null,\n        pageSize: this.mixinConfig.getListDataIsPage ? this.pageSize : null,\n        ...this.queryParams\n      }\n      if (!url) return\n      this.getDataLoading = true\n      for (const key in params) {\n        if (!params[key]) delete params[key]\n      }\n      return this.$http.get(url, params).then(({ ok, data, msg }) => {\n        this.getDataLoading = false\n        if (ok) {\n          this.listData = this.mixinConfig.getListDataIsPage ? (data.rows ? data.rows : data) : data\n          this.total = this.mixinConfig.getListDataIsPage ? data.total : 0\n          this.getListDataAfter(this.listData)\n        } else {\n          this.$message.error(msg)\n          return Promise.reject(msg)\n        }\n        return data\n      }).catch(() => {\n        this.getDataLoading = false\n      })\n    },\n    // 选择项发生变化时事件处理\n    selectionChangeHandle (rows) {\n      this.listSelections = rows\n    },\n    // 每页条数发生变化时事件处理\n    handlePageSizeChange (pageSize) {\n      this.page = (this.total / pageSize >= this.page) ? this.page : 0\n      this.pageSize = pageSize\n      this.getListData()\n    },\n    // 当前页发生变化时事件处理\n    handleCurrentPageChange (page) {\n      this.page = page\n      this.getListData()\n    },\n    // 新增|修改 id，打开弹窗\n    addOrUpdateHandle (id = null) {\n      this.isRenderDialog = true\n      this.$nextTick(() => {\n        this.$refs.addOrUpdate.visible = true\n        this.$refs.addOrUpdate.formData.id = id\n      })\n    },\n    // 删除数据\n    deleteHandle (id = null, key = 'id') {\n      const title = this.$t('prompt.title')\n      const info = this.$t('prompt.info', {\n        handle: this.$t('delete')\n      })\n      const confirmConfig = {\n        confirmButtonText: this.$t('confirm'),\n        cancelButtonText: this.$t('cancel'),\n        type: 'warning'\n      }\n      const url = this.mixinConfig.deleteURL\n      if (!url) return\n      if (!id && this.mixinConfig.isBatchDelete && !this.listSelections.length) {\n        return this.$message({\n          message: this.$t('prompt.deleteSelect'),\n          type: 'warning',\n          duration: 1000\n        })\n      }\n      id = (!id && this.mixinConfig.isBatchDelete) ? this.listSelections.map(item => item[this.mixinConfig.batchDeleteKey]) : id\n      return this.$confirm(info, title, confirmConfig).then(() => {\n        return this.$http.delete(url, { [key]: id }).then(({ ok, msg = 'error' }) => {\n          if (ok) {\n            actionSuccessAfter.call(this)\n            return true\n          } else {\n            this.$message.error(msg)\n            return Promise.reject(msg)\n          }\n        })\n      }).catch(() => false)\n    },\n    // 更新状态\n    updateStatus (idKey, idVal, statusKey, statusVal, method = 'put') {\n      const title = this.$t('prompt.title')\n      const info = this.$t('prompt.info', {\n        handle: this.$t('update')\n      })\n      const confirmConfig = {\n        confirmButtonText: this.$t('confirm'),\n        cancelButtonText: this.$t('cancel'),\n        type: 'warning'\n      }\n      const url = this.mixinConfig.updateStatusURL\n      const params = {\n        [idKey]: idVal,\n        [statusKey]: statusVal\n      }\n      if (!url) return\n      return this.$confirm(info, title, confirmConfig).then(() => {\n        return this.$http[method](url, params).then(({ ok, msg = 'error' }) => {\n          if (ok) {\n            actionSuccessAfter.call(this)\n            return true\n          } else {\n            this.$message.error(msg)\n            return Promise.reject(msg)\n          }\n        })\n      }).catch(() => {\n        this.getListData()\n        return false\n      })\n    },\n    // 更新排序\n    updateSort (idKey, idVal, sortKey, sortVal, method = 'put') {\n      const url = this.mixinConfig.updateSortURL\n      const params = {\n        [idKey]: idVal,\n        [sortKey]: sortVal\n      }\n      if (!url) return\n      return this.$http[method](url, params).then(({ ok, msg = 'error' }) => {\n        if (ok) {\n          actionSuccessAfter.call(this)\n          return true\n        } else {\n          this.$message.error(msg)\n          return Promise.reject(msg)\n        }\n      }).catch(() => {\n        this.getListData()\n        return false\n      })\n    },\n    // 排序变化时事件方法\n    sortChangeHandle (data) {\n      if (this.order !== 'asc' || this.order !== 'desc' || !this.orderField) return\n      this.getListData()\n    },\n    // 数据请求成功之后的回调（默认占位，以防业务组件不需要该方法而报错getListDataAfter is undefined）\n    getListDataAfter () {\n      return null\n    }\n  }\n}\n\nexport default moduleMixin\n"],"sourceRoot":""}