{"version":3,"sources":["webpack:///./src/mixins/moduleMixin.js"],"names":["actionSuccessAfter","_this","this","$message","message","$t","type","duration","showClose","onClose","getListData","moduleMixin","data","mixinConfig","activatedAutoRequest","getListDataURL","getListDataIsPage","deleteURL","isBatchDelete","batchDeleteKey","getDetailsURL","updateStatusURL","updateSortURL","exportURL","listData","queryParams","page","pageSize","total","order","orderField","getDataLoading","isRenderDialog","listSelections","created","methods","_this2","url","params","Object","C_Users_user_Desktop_codes_vue_element_admin_node_modules_babel_runtime_corejs2_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","key","$http","get","then","_ref","ok","msg","rows","getListDataAfter","error","C_Users_user_Desktop_codes_vue_element_admin_node_modules_babel_runtime_corejs2_core_js_promise__WEBPACK_IMPORTED_MODULE_1___default","a","reject","catch","selectionChangeHandle","handlePageSizeChange","handleCurrentPageChange","addOrUpdateHandle","_this3","id","arguments","length","undefined","$nextTick","$refs","addOrUpdate","visible","formData","deleteHandle","_this4","title","info","handle","confirmConfig","confirmButtonText","cancelButtonText","map","item","$confirm","delete","C_Users_user_Desktop_codes_vue_element_admin_node_modules_babel_runtime_corejs2_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","_ref2","_ref2$msg","call","updateStatus","idKey","idVal","statusKey","statusVal","_params","_this5","method","_ref3","_ref3$msg","updateSort","sortKey","sortVal","_params2","_this6","_ref4","_ref4$msg","sortChangeHandle"],"mappings":"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","file":"js/chunk-2d22a183.1800541b.js","sourcesContent":["// import qs from 'qs'\r\n\r\n// 操作成功后刷新列表数据\r\nfunction actionSuccessAfter () {\r\n  this.$message({\r\n    message: this.$t('prompt.success'),\r\n    type: 'success',\r\n    duration: 1000,\r\n    showClose: true,\r\n    onClose: () => {\r\n      this.getListData()\r\n    }\r\n  })\r\n}\r\n\r\nconst moduleMixin = {\r\n  data () {\r\n    return {\r\n      // 配置属性\r\n      mixinConfig: {\r\n        activatedAutoRequest: true, // 此页面是否在激活（进入）时，调用查询数据列表接口？\r\n        getListDataURL: null, // 数据列表接口，API地址\r\n        getListDataIsPage: false, // 数据列表接口，是否需要分页？\r\n        deleteURL: null, // 删除接口，API地址\r\n        isBatchDelete: false, // 删除接口，是否需要批量？\r\n        batchDeleteKey: 'id', // 删除接口，批量状态下由那个key进行标记操作？比如：pid，uid...\r\n        getDetailsURL: null, // 数据单个详情接口，API地址\r\n        updateStatusURL: null, // 改变状态， API地址\r\n        updateSortURL: null, // 改变排序， API地址\r\n        exportURL: null // 导出接口，API地址\r\n      },\r\n      // 默认属性\r\n      listData: [], // 列表数据\r\n      queryParams: {}, // 查询条件\r\n      page: 1, // 当前页码\r\n      pageSize: 10, // 每页数\r\n      total: 0, // 总条数\r\n      order: null, // 排序顺序，asc | desc\r\n      orderField: null, // 排序字段\r\n      getDataLoading: false, // 获取数据，loading状态\r\n      isRenderDialog: false, // 新增|更新，弹窗是否渲染\r\n      listSelections: [] // 列表数据，多选项\r\n    }\r\n  },\r\n  created () {\r\n    if (this.mixinConfig.activatedAutoRequest) {\r\n      this.getListData()\r\n    }\r\n  },\r\n  methods: {\r\n    // 获取数据列表\r\n    getListData () {\r\n      let url = this.mixinConfig.getListDataURL\r\n      let params = {\r\n        order: this.order,\r\n        orderField: this.orderField,\r\n        page: this.mixinConfig.getListDataIsPage ? this.page : null,\r\n        pageSize: this.mixinConfig.getListDataIsPage ? this.pageSize : null,\r\n        ...this.queryParams\r\n      }\r\n      if (!url) return\r\n      this.getDataLoading = true\r\n      for (let key in params) {\r\n        if (!params[key]) delete params[key]\r\n      }\r\n      return this.$http.get(url, params).then(({ ok, data, msg }) => {\r\n        this.getDataLoading = false\r\n        if (ok) {\r\n          this.listData = this.mixinConfig.getListDataIsPage ? (data.rows ? data.rows : data) : data\r\n          this.total = this.mixinConfig.getListDataIsPage ? data.total : 0\r\n          this.getListDataAfter(this.listData)\r\n        } else {\r\n          this.$message.error(msg)\r\n          return Promise.reject(msg)\r\n        }\r\n        return data\r\n      }).catch(() => {\r\n        this.getDataLoading = false\r\n      })\r\n    },\r\n    // 选择项发生变化时事件处理\r\n    selectionChangeHandle (rows) {\r\n      this.listSelections = rows\r\n    },\r\n    // 每页条数发生变化时事件处理\r\n    handlePageSizeChange (pageSize) {\r\n      this.page = (this.total / pageSize >= this.page) ? this.page : 0\r\n      this.pageSize = pageSize\r\n      this.getListData()\r\n    },\r\n    // 当前页发生变化时事件处理\r\n    handleCurrentPageChange (page) {\r\n      this.page = page\r\n      this.getListData()\r\n    },\r\n    // 新增|修改 id，打开弹窗\r\n    addOrUpdateHandle (id = null) {\r\n      this.isRenderDialog = true\r\n      this.$nextTick(() => {\r\n        this.$refs.addOrUpdate.visible = true\r\n        this.$refs.addOrUpdate.formData.id = id\r\n      })\r\n    },\r\n    // 删除数据\r\n    deleteHandle (id = null, key = 'id') {\r\n      let title = this.$t('prompt.title')\r\n      let info = this.$t('prompt.info', {\r\n        'handle': this.$t('delete')\r\n      })\r\n      let confirmConfig = {\r\n        confirmButtonText: this.$t('confirm'),\r\n        cancelButtonText: this.$t('cancel'),\r\n        type: 'warning'\r\n      }\r\n      let url = this.mixinConfig.deleteURL\r\n      if (!url) return\r\n      if (!id && this.mixinConfig.isBatchDelete && !this.listSelections.length) {\r\n        return this.$message({\r\n          message: this.$t('prompt.deleteSelect'),\r\n          type: 'warning',\r\n          duration: 1000\r\n        })\r\n      }\r\n      id = (!id && this.mixinConfig.isBatchDelete) ? this.listSelections.map(item => item[this.mixinConfig.batchDeleteKey]) : id\r\n      return this.$confirm(info, title, confirmConfig).then(() => {\r\n        return this.$http.delete(url, { [key]: id }).then(({ ok, msg = 'error' }) => {\r\n          if (ok) {\r\n            actionSuccessAfter.call(this)\r\n            return true\r\n          } else {\r\n            this.$message.error(msg)\r\n            return Promise.reject(msg)\r\n          }\r\n        })\r\n      }).catch(() => false)\r\n    },\r\n    // 更新状态\r\n    updateStatus (idKey, idVal, statusKey, statusVal, method = 'put') {\r\n      let title = this.$t('prompt.title')\r\n      let info = this.$t('prompt.info', {\r\n        'handle': this.$t('update')\r\n      })\r\n      let confirmConfig = {\r\n        confirmButtonText: this.$t('confirm'),\r\n        cancelButtonText: this.$t('cancel'),\r\n        type: 'warning'\r\n      }\r\n      let url = this.mixinConfig.updateStatusURL\r\n      let params = {\r\n        [idKey]: idVal,\r\n        [statusKey]: statusVal\r\n      }\r\n      if (!url) return\r\n      return this.$confirm(info, title, confirmConfig).then(() => {\r\n        return this.$http[method](url, params).then(({ ok, msg = 'error' }) => {\r\n          if (ok) {\r\n            actionSuccessAfter.call(this)\r\n            return true\r\n          } else {\r\n            this.$message.error(msg)\r\n            return Promise.reject(msg)\r\n          }\r\n        })\r\n      }).catch(() => {\r\n        this.getListData()\r\n        return false\r\n      })\r\n    },\r\n    // 更新排序\r\n    updateSort (idKey, idVal, sortKey, sortVal, method = 'put') {\r\n      let url = this.mixinConfig.updateSortURL\r\n      let params = {\r\n        [idKey]: idVal,\r\n        [sortKey]: sortVal\r\n      }\r\n      if (!url) return\r\n      return this.$http[method](url, params).then(({ ok, msg = 'error' }) => {\r\n        if (ok) {\r\n          actionSuccessAfter.call(this)\r\n          return true\r\n        } else {\r\n          this.$message.error(msg)\r\n          return Promise.reject(msg)\r\n        }\r\n      }).catch(() => {\r\n        this.getListData()\r\n        return false\r\n      })\r\n    },\r\n    // 排序变化时事件方法\r\n    sortChangeHandle (data) {\r\n      if (this.order !== 'asc' || this.order !== 'desc' || !this.orderField) return\r\n      this.getListData()\r\n    },\r\n    // 数据请求成功之后的回调（默认占位，以防业务组件不需要该方法而报错is not func）\r\n    getListDataAfter () {\r\n      return null\r\n    }\r\n  }\r\n}\r\n\r\nexport default moduleMixin\r\n"],"sourceRoot":""}